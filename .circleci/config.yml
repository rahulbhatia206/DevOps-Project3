version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
          workflow_id:
              type: string
              default: "${CIRCLE_WORKFLOW_ID:0:7}"
      steps:
          - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
                    aws cloudformation delete-stack \
                        --stack-name "udapeople-backend-<< parameters.workflow_id >>"
                    aws cloudformation delete-stack \
                        --stack-name "udapeople-frontend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: gajdulj" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $CIRCLE_WORKFLOW_ID
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
            echo "reverting migrations..."
            cd ~/project/backend
            ls
            npm install
            npm run migrations:revert
            fi

  notify-status-on-slack:
    steps:
      - slack/status:
          failure_message: ':red_circle: \`$CIRCLE_JOB\` JOB is _*Failed*_!! \n Project: \`$CIRCLE_PROJECT_REPONAME\` Branch: \`$CIRCLE_BRANCH\` \n'
          fail_only: true

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-status-on-slack

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Back-end
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-status-on-slack

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run Front-End Tests
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - notify-status-on-slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-End Tests
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-status-on-slack

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-End Dependencies
          command: |
            cd frontend
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-status-on-slack

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-End Dependencies
          command: |
            cd backend
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-status-on-slack

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeopleFrontend_${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory. Getting it as an output from backend.yml script.
          command: |


            # Save the ip
            backendip=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)

            # Send to memstash
            curl -H "Content-Type: text/plain" -H "token: 7df267d9-247d-47c6-b75c-de9bd3f716f8" --request PUT --data "$backendip" https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID}
            echo "Adding to memstash:"
            echo "$backendip"
            echo "$backendip" >> .circleci/ansible/inventory.txt
            # Save the url
            export backendurl="http://${backendip}:3030"
            echo "$backendurl"
            curl -H "Content-Type: text/plain" -H "token: 7df267d9-247d-47c6-b75c-de9bd3f716f8" --request PUT --data "$backendurl" https://api.memstash.io/values/ec2_back_url_${CIRCLE_WORKFLOW_ID}

      - run:
          name: Ensure inventory saved
          command: |
            ls ~/
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify-status-on-slack

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - run: yum install -y apk
      - add_ssh_keys:
          fingerprints: [ "3d:4a:5e:eb:df:b7:b0:ab:fa:a3:f8:ef:5a:98:47:86" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure inventory loaded
          command: |
            ls
            ls ~/
            pwd
            apk add curl
            cat ~/project/.circleci/ansible/inventory.txt
            export BACKEND_IP=$(curl -H "token: 7df267d9-247d-47c6-b75c-de9bd3f716f8" --request GET \
            https://api.memstash.io/values/ec2_back_ip_${CIRCLE_WORKFLOW_ID})
            echo "${BACKEND_IP}"  >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh
            ls
      - run:
          name: Set global vars
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "running migrations"
            npm run migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: 7df267d9-247d-47c6-b75c-de9bd3f716f8" --request PUT --data "1" \
             https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify-status-on-slack

#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
            

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#            requires: [build-frontend]
#      - test-backend:
#            requires: [build-backend]
#      - scan-frontend:
#            requires: [test-frontend]
#      - scan-backend:
#            requires: [test-backend]
      - deploy-infrastructure:
#            requires: [scan-frontend, scan-backend]
            filters:
                branches:
                  only:
                    - master
      - configure-infrastructure:
            requires: [deploy-infrastructure]
      - run-migrations:
            requires: [configure-infrastructure]
#      - deploy-frontend:
#            requires: [run-migrations]
#      - deploy-backend:
#            requires: [deploy-frontend]
#      - smoke-test:
#            requires: [deploy-backend]
#      - cloudfront-update:
#            requires: [smoke-test]
#      - cleanup:
#              requires: [cloudfront-update]